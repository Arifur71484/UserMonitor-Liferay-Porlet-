/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.laitspa.usermonitor.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import it.laitspa.usermonitor.model.user_monitor;
import it.laitspa.usermonitor.model.user_monitorModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the user_monitor service. Represents a row in the &quot;user_monitor&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link it.laitspa.usermonitor.model.user_monitorModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link user_monitorImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see user_monitorImpl
 * @see it.laitspa.usermonitor.model.user_monitor
 * @see it.laitspa.usermonitor.model.user_monitorModel
 * @generated
 */
public class user_monitorModelImpl extends BaseModelImpl<user_monitor>
	implements user_monitorModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a user_monitor model instance should use the {@link it.laitspa.usermonitor.model.user_monitor} interface instead.
	 */
	public static final String TABLE_NAME = "user_monitor";
	public static final Object[][] TABLE_COLUMNS = {
			{ "recordId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "userSurname", Types.VARCHAR },
			{ "userRealName", Types.VARCHAR },
			{ "emailAddress", Types.VARCHAR },
			{ "remoteIp", Types.VARCHAR },
			{ "dataLogin", Types.VARCHAR },
			{ "typeAccess", Types.VARCHAR },
			{ "UserMonitorId", Types.BIGINT },
			{ "DATE", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table user_monitor (recordId LONG not null primary key,userName VARCHAR(75) null,userSurname VARCHAR(75) null,userRealName VARCHAR(75) null,emailAddress VARCHAR(75) null,remoteIp VARCHAR(75) null,dataLogin VARCHAR(75) null,typeAccess VARCHAR(75) null,UserMonitorId LONG,DATE DATE null)";
	public static final String TABLE_SQL_DROP = "drop table user_monitor";
	public static final String ORDER_BY_JPQL = " ORDER BY user_monitor.recordId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY user_monitor.recordId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.it.laitspa.usermonitor.model.user_monitor"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.it.laitspa.usermonitor.model.user_monitor"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.it.laitspa.usermonitor.model.user_monitor"),
			true);
	public static long DATE_COLUMN_BITMASK = 1L;
	public static long TYPEACCESS_COLUMN_BITMASK = 2L;
	public static long RECORDID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.it.laitspa.usermonitor.model.user_monitor"));

	public user_monitorModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _recordId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRecordId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _recordId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return user_monitor.class;
	}

	@Override
	public String getModelClassName() {
		return user_monitor.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("recordId", getRecordId());
		attributes.put("userName", getUserName());
		attributes.put("userSurname", getUserSurname());
		attributes.put("userRealName", getUserRealName());
		attributes.put("emailAddress", getEmailAddress());
		attributes.put("remoteIp", getRemoteIp());
		attributes.put("dataLogin", getDataLogin());
		attributes.put("typeAccess", getTypeAccess());
		attributes.put("UserMonitorId", getUserMonitorId());
		attributes.put("DATE", getDATE());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long recordId = (Long)attributes.get("recordId");

		if (recordId != null) {
			setRecordId(recordId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		String userSurname = (String)attributes.get("userSurname");

		if (userSurname != null) {
			setUserSurname(userSurname);
		}

		String userRealName = (String)attributes.get("userRealName");

		if (userRealName != null) {
			setUserRealName(userRealName);
		}

		String emailAddress = (String)attributes.get("emailAddress");

		if (emailAddress != null) {
			setEmailAddress(emailAddress);
		}

		String remoteIp = (String)attributes.get("remoteIp");

		if (remoteIp != null) {
			setRemoteIp(remoteIp);
		}

		String dataLogin = (String)attributes.get("dataLogin");

		if (dataLogin != null) {
			setDataLogin(dataLogin);
		}

		String typeAccess = (String)attributes.get("typeAccess");

		if (typeAccess != null) {
			setTypeAccess(typeAccess);
		}

		Long UserMonitorId = (Long)attributes.get("UserMonitorId");

		if (UserMonitorId != null) {
			setUserMonitorId(UserMonitorId);
		}

		Date DATE = (Date)attributes.get("DATE");

		if (DATE != null) {
			setDATE(DATE);
		}
	}

	@Override
	public long getRecordId() {
		return _recordId;
	}

	@Override
	public void setRecordId(long recordId) {
		_recordId = recordId;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public String getUserSurname() {
		if (_userSurname == null) {
			return StringPool.BLANK;
		}
		else {
			return _userSurname;
		}
	}

	@Override
	public void setUserSurname(String userSurname) {
		_userSurname = userSurname;
	}

	@Override
	public String getUserRealName() {
		if (_userRealName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userRealName;
		}
	}

	@Override
	public void setUserRealName(String userRealName) {
		_userRealName = userRealName;
	}

	@Override
	public String getEmailAddress() {
		if (_emailAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _emailAddress;
		}
	}

	@Override
	public void setEmailAddress(String emailAddress) {
		_emailAddress = emailAddress;
	}

	@Override
	public String getRemoteIp() {
		if (_remoteIp == null) {
			return StringPool.BLANK;
		}
		else {
			return _remoteIp;
		}
	}

	@Override
	public void setRemoteIp(String remoteIp) {
		_remoteIp = remoteIp;
	}

	@Override
	public String getDataLogin() {
		if (_dataLogin == null) {
			return StringPool.BLANK;
		}
		else {
			return _dataLogin;
		}
	}

	@Override
	public void setDataLogin(String dataLogin) {
		_dataLogin = dataLogin;
	}

	@Override
	public String getTypeAccess() {
		if (_typeAccess == null) {
			return StringPool.BLANK;
		}
		else {
			return _typeAccess;
		}
	}

	@Override
	public void setTypeAccess(String typeAccess) {
		_columnBitmask |= TYPEACCESS_COLUMN_BITMASK;

		if (_originalTypeAccess == null) {
			_originalTypeAccess = _typeAccess;
		}

		_typeAccess = typeAccess;
	}

	public String getOriginalTypeAccess() {
		return GetterUtil.getString(_originalTypeAccess);
	}

	@Override
	public long getUserMonitorId() {
		return _UserMonitorId;
	}

	@Override
	public void setUserMonitorId(long UserMonitorId) {
		_UserMonitorId = UserMonitorId;
	}

	@Override
	public Date getDATE() {
		return _DATE;
	}

	@Override
	public void setDATE(Date DATE) {
		_columnBitmask |= DATE_COLUMN_BITMASK;

		if (_originalDATE == null) {
			_originalDATE = _DATE;
		}

		_DATE = DATE;
	}

	public Date getOriginalDATE() {
		return _originalDATE;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			user_monitor.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public user_monitor toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (user_monitor)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		user_monitorImpl user_monitorImpl = new user_monitorImpl();

		user_monitorImpl.setRecordId(getRecordId());
		user_monitorImpl.setUserName(getUserName());
		user_monitorImpl.setUserSurname(getUserSurname());
		user_monitorImpl.setUserRealName(getUserRealName());
		user_monitorImpl.setEmailAddress(getEmailAddress());
		user_monitorImpl.setRemoteIp(getRemoteIp());
		user_monitorImpl.setDataLogin(getDataLogin());
		user_monitorImpl.setTypeAccess(getTypeAccess());
		user_monitorImpl.setUserMonitorId(getUserMonitorId());
		user_monitorImpl.setDATE(getDATE());

		user_monitorImpl.resetOriginalValues();

		return user_monitorImpl;
	}

	@Override
	public int compareTo(user_monitor user_monitor) {
		long primaryKey = user_monitor.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof user_monitor)) {
			return false;
		}

		user_monitor user_monitor = (user_monitor)obj;

		long primaryKey = user_monitor.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		user_monitorModelImpl user_monitorModelImpl = this;

		user_monitorModelImpl._originalTypeAccess = user_monitorModelImpl._typeAccess;

		user_monitorModelImpl._originalDATE = user_monitorModelImpl._DATE;

		user_monitorModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<user_monitor> toCacheModel() {
		user_monitorCacheModel user_monitorCacheModel = new user_monitorCacheModel();

		user_monitorCacheModel.recordId = getRecordId();

		user_monitorCacheModel.userName = getUserName();

		String userName = user_monitorCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			user_monitorCacheModel.userName = null;
		}

		user_monitorCacheModel.userSurname = getUserSurname();

		String userSurname = user_monitorCacheModel.userSurname;

		if ((userSurname != null) && (userSurname.length() == 0)) {
			user_monitorCacheModel.userSurname = null;
		}

		user_monitorCacheModel.userRealName = getUserRealName();

		String userRealName = user_monitorCacheModel.userRealName;

		if ((userRealName != null) && (userRealName.length() == 0)) {
			user_monitorCacheModel.userRealName = null;
		}

		user_monitorCacheModel.emailAddress = getEmailAddress();

		String emailAddress = user_monitorCacheModel.emailAddress;

		if ((emailAddress != null) && (emailAddress.length() == 0)) {
			user_monitorCacheModel.emailAddress = null;
		}

		user_monitorCacheModel.remoteIp = getRemoteIp();

		String remoteIp = user_monitorCacheModel.remoteIp;

		if ((remoteIp != null) && (remoteIp.length() == 0)) {
			user_monitorCacheModel.remoteIp = null;
		}

		user_monitorCacheModel.dataLogin = getDataLogin();

		String dataLogin = user_monitorCacheModel.dataLogin;

		if ((dataLogin != null) && (dataLogin.length() == 0)) {
			user_monitorCacheModel.dataLogin = null;
		}

		user_monitorCacheModel.typeAccess = getTypeAccess();

		String typeAccess = user_monitorCacheModel.typeAccess;

		if ((typeAccess != null) && (typeAccess.length() == 0)) {
			user_monitorCacheModel.typeAccess = null;
		}

		user_monitorCacheModel.UserMonitorId = getUserMonitorId();

		Date DATE = getDATE();

		if (DATE != null) {
			user_monitorCacheModel.DATE = DATE.getTime();
		}
		else {
			user_monitorCacheModel.DATE = Long.MIN_VALUE;
		}

		return user_monitorCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{recordId=");
		sb.append(getRecordId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", userSurname=");
		sb.append(getUserSurname());
		sb.append(", userRealName=");
		sb.append(getUserRealName());
		sb.append(", emailAddress=");
		sb.append(getEmailAddress());
		sb.append(", remoteIp=");
		sb.append(getRemoteIp());
		sb.append(", dataLogin=");
		sb.append(getDataLogin());
		sb.append(", typeAccess=");
		sb.append(getTypeAccess());
		sb.append(", UserMonitorId=");
		sb.append(getUserMonitorId());
		sb.append(", DATE=");
		sb.append(getDATE());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("it.laitspa.usermonitor.model.user_monitor");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>recordId</column-name><column-value><![CDATA[");
		sb.append(getRecordId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userSurname</column-name><column-value><![CDATA[");
		sb.append(getUserSurname());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userRealName</column-name><column-value><![CDATA[");
		sb.append(getUserRealName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>emailAddress</column-name><column-value><![CDATA[");
		sb.append(getEmailAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>remoteIp</column-name><column-value><![CDATA[");
		sb.append(getRemoteIp());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dataLogin</column-name><column-value><![CDATA[");
		sb.append(getDataLogin());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>typeAccess</column-name><column-value><![CDATA[");
		sb.append(getTypeAccess());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>UserMonitorId</column-name><column-value><![CDATA[");
		sb.append(getUserMonitorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>DATE</column-name><column-value><![CDATA[");
		sb.append(getDATE());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = user_monitor.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			user_monitor.class
		};
	private long _recordId;
	private String _userName;
	private String _userSurname;
	private String _userRealName;
	private String _emailAddress;
	private String _remoteIp;
	private String _dataLogin;
	private String _typeAccess;
	private String _originalTypeAccess;
	private long _UserMonitorId;
	private Date _DATE;
	private Date _originalDATE;
	private long _columnBitmask;
	private user_monitor _escapedModel;
}